//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from OrchidParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Orchid.Parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="OrchidParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface IOrchidParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] OrchidParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] OrchidParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] OrchidParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] OrchidParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] OrchidParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] OrchidParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] OrchidParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] OrchidParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.arrowFunctions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowFunctions([NotNull] OrchidParser.ArrowFunctionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.arrowFunctions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowFunctions([NotNull] OrchidParser.ArrowFunctionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] OrchidParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] OrchidParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.assignmentOperatorStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperatorStatement([NotNull] OrchidParser.AssignmentOperatorStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.assignmentOperatorStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperatorStatement([NotNull] OrchidParser.AssignmentOperatorStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] OrchidParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] OrchidParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterList([NotNull] OrchidParser.FormalParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterList([NotNull] OrchidParser.FormalParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] OrchidParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] OrchidParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] OrchidParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] OrchidParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.printStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintStatement([NotNull] OrchidParser.PrintStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.printStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintStatement([NotNull] OrchidParser.PrintStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentStatement([NotNull] OrchidParser.AssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentStatement([NotNull] OrchidParser.AssignmentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.declarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationStatement([NotNull] OrchidParser.DeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.declarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationStatement([NotNull] OrchidParser.DeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="OrchidParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoStatement([NotNull] OrchidParser.DoStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="OrchidParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoStatement([NotNull] OrchidParser.DoStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="OrchidParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] OrchidParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="OrchidParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] OrchidParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="OrchidParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] OrchidParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="OrchidParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] OrchidParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationList([NotNull] OrchidParser.VariableDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationList([NotNull] OrchidParser.VariableDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionSequence([NotNull] OrchidParser.ExpressionSequenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionSequence([NotNull] OrchidParser.ExpressionSequenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.prefixStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrefixStatement([NotNull] OrchidParser.PrefixStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.prefixStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrefixStatement([NotNull] OrchidParser.PrefixStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.postfixStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostfixStatement([NotNull] OrchidParser.PostfixStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.postfixStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostfixStatement([NotNull] OrchidParser.PostfixStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] OrchidParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] OrchidParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] OrchidParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] OrchidParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpression([NotNull] OrchidParser.RelationalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpression([NotNull] OrchidParser.RelationalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] OrchidParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] OrchidParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfExpression([NotNull] OrchidParser.IfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfExpression([NotNull] OrchidParser.IfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndExpression([NotNull] OrchidParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndExpression([NotNull] OrchidParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PowerExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowerExpression([NotNull] OrchidParser.PowerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PowerExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowerExpression([NotNull] OrchidParser.PowerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnlessExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnlessExpression([NotNull] OrchidParser.UnlessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnlessExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnlessExpression([NotNull] OrchidParser.UnlessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] OrchidParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] OrchidParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrExpression([NotNull] OrchidParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrExpression([NotNull] OrchidParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteralExpression([NotNull] OrchidParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteralExpression([NotNull] OrchidParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] OrchidParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] OrchidParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCallExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] OrchidParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCallExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] OrchidParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] OrchidParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] OrchidParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpression([NotNull] OrchidParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpression([NotNull] OrchidParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrefixExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrefixExpression([NotNull] OrchidParser.PrefixExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrefixExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrefixExpression([NotNull] OrchidParser.PrefixExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperatorExpression([NotNull] OrchidParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperatorExpression([NotNull] OrchidParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryPlusExpression([NotNull] OrchidParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryPlusExpression([NotNull] OrchidParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostfixExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostfixExpression([NotNull] OrchidParser.PostfixExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostfixExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostfixExpression([NotNull] OrchidParser.PostfixExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowFunctionExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowFunctionExpression([NotNull] OrchidParser.ArrowFunctionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowFunctionExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowFunctionExpression([NotNull] OrchidParser.ArrowFunctionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] OrchidParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="OrchidParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] OrchidParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.multiplicativeOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeOperators([NotNull] OrchidParser.MultiplicativeOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.multiplicativeOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeOperators([NotNull] OrchidParser.MultiplicativeOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.additiveOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveOperators([NotNull] OrchidParser.AdditiveOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.additiveOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveOperators([NotNull] OrchidParser.AdditiveOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.prefixPostfixOps"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrefixPostfixOps([NotNull] OrchidParser.PrefixPostfixOpsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.prefixPostfixOps"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrefixPostfixOps([NotNull] OrchidParser.PrefixPostfixOpsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.logicalAndOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndOperators([NotNull] OrchidParser.LogicalAndOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.logicalAndOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndOperators([NotNull] OrchidParser.LogicalAndOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.logicalOrOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrOperators([NotNull] OrchidParser.LogicalOrOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.logicalOrOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrOperators([NotNull] OrchidParser.LogicalOrOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.comparisonOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonOperators([NotNull] OrchidParser.ComparisonOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.comparisonOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonOperators([NotNull] OrchidParser.ComparisonOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.assignmentOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperators([NotNull] OrchidParser.AssignmentOperatorsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.assignmentOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperators([NotNull] OrchidParser.AssignmentOperatorsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] OrchidParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] OrchidParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] OrchidParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] OrchidParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteral([NotNull] OrchidParser.ArrayLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteral([NotNull] OrchidParser.ArrayLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] OrchidParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] OrchidParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="OrchidParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEos([NotNull] OrchidParser.EosContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="OrchidParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEos([NotNull] OrchidParser.EosContext context);
}
} // namespace Orchid.Parser
